orbs:
  slack: circleci/slack@4.1
version: '2.1'
executors:
  app-executor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/repo
  terraform-executor:
    docker:
      - image: hashicorp/terraform:1.3.9

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys: 
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependencies
    run:
      name: Install dependecies
      command: |
        mkdir -p artifacts
        npm install
  - &save-cache
    save_cache:
      paths: 
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Installing aws cli
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
  - &build-project
    run:
      name: Build Project
      command: |
        if [ "$CIRCLE_BRANCH" == "master" ]; then
          echo "REACT_APP_URL=$NEXT_PUBLIC_APP_URL_PODUCTION" > .env
        elif [ "$CIRCLE_BRANCH" == "staging" ]; then
          echo "REACT_APP_URL=$NEXT_PUBLIC_APP_URL_STAGING" > .env
        else
          echo "REACT_APP_URL=$NEXT_PUBLIC_APP_URL_DEVELOP" > .env
        fi
        npm install
        CI=false npm run build
        cd out
        zip ../out.zip -r * .[^.]*
        echo "Build successful"
jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - run:
          name: Copy Infrastructure Folder
          command: cp -r infrastructure artifacts/infrastructure
      - persist_to_workspace:
          root: ./
          paths:
            - artifacts

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Validate and Format
          command: |
            cd infrastructure/
            terraform init -backend=false
            terraform validate
            terraform fmt

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/infrastructure/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/infrastructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output hire_a_friend_app_bucket_name > ../hire_a_friend_bucket_name.txt
            terraform output couldfront_distribution_id > ../couldfront_distribution_id.txt
      - persist_to_workspace:
          root: ./
          paths:
          - artifacts

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to aws s3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/hire_a_friend_bucket_name.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/out s3://${AWS_BUCKET_NAME} --delete
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws --region ${AWS_REGION} s3 sync ~/repo/out s3://${AWS_BUCKET_NAME} --delete
            else
              aws --region ${AWS_REGION} s3 sync ~/repo/out s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to aws cloudfront
          command: |
            CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/couldfront_distribution_id.txt | sed 's/\"//g')
            echo $CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            else
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            fi

  # terraform-destroy:
  #   executor: terraform-executor
  #   steps:
  #     - checkout
  #     - *show-current-branch-name
  #     - run:
  #         name: Terraform Destroy
  #         command: |
  #           cd infrastructure/
  #           terraform init
  #           terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
  #           terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - build
      - terraform-validate:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront
            
      # - terraform-destroy:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         only:
      #           - develop
      #           - staging
      #           - master